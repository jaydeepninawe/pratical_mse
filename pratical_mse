/*#include<iostream>
using namespace std;


int main()
{
int i;
long double power, base, ans=1;
cout<<"enter power : ";
cin>>power;
cout<<"enter base : ";
cin>>base;

for(i=0;i!=power;i++){

ans=ans*base;
}

cout<<"solution : "<< ans;
return 0;
}


#include<iostream>
using namespace std;


class jaydeep{

private :
float base;
float power;
long double ans=1;

public :
	jaydeep(float base , float power){
	this->base=base;
	this->power=power;
	}
	void _power(){
	int i;
	for(i=0;i!=power;i++){

	ans=ans*base;
	}

	cout<<"solution : "<< ans;
	}


	};



int main(){
int i;

do{
long double power, base;
cout<<"enter power : ";
cin>>power;
cout<<"enter base : ";
cin>>base;
jaydeep a1(base,power);
a1._power();
cout<<"enter 1 if you want to continue \n else 0 : ";
cin>>i;
}while(i==1);

return 0 ;
}
*/



#include<iostream>
using namespace std;


class Complex {

private :
float base;
float power;
float ans=1;

public :
	Complex(float base=0 , float power=0){
	this->base=base;
	this->power=power;
	}
	
	 Complex operator * (Complex &a){
	 Complex temp;
	 temp.base=base+a.base;
	 temp.power=power+a.power;
	 return temp;
	 }
	 
	 void jaydeep(){
	int i;
	for(i=0;i!=power;i++){

	ans=ans*base;
	}

	cout<<"solution : "<< ans;
	}
};
	
	
	

int main(){

float power1, base1;
float power2, base2;
cout<<"enter power 1: ";
cin>>power1;
cout<<"enter base 1: ";
cin>>base1;
Complex a1(base1,power1);



cout<<"enter power 2: ";
cin>>power2;
cout<<"enter base 2: ";
cin>>base2;
Complex a2(base2,power2);


Complex temp;
temp=a1*a2;
temp.jaydeep();


return 0 ;
}
